// Generated by Dagger (https://dagger.dev).
package com.ivan.todoengine.networking.oauth2;

import com.ivan.todoengine.networking.di.IApiFactory;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OAuth2Module_ProvideUnauthenticatedOAuth2TokenApiFactory implements Factory<OAuth2TokenApi> {
  private final Provider<IApiFactory> apiFactoryProvider;

  public OAuth2Module_ProvideUnauthenticatedOAuth2TokenApiFactory(
      Provider<IApiFactory> apiFactoryProvider) {
    this.apiFactoryProvider = apiFactoryProvider;
  }

  @Override
  public OAuth2TokenApi get() {
    return provideUnauthenticatedOAuth2TokenApi(apiFactoryProvider.get());
  }

  public static OAuth2Module_ProvideUnauthenticatedOAuth2TokenApiFactory create(
      Provider<IApiFactory> apiFactoryProvider) {
    return new OAuth2Module_ProvideUnauthenticatedOAuth2TokenApiFactory(apiFactoryProvider);
  }

  public static OAuth2TokenApi provideUnauthenticatedOAuth2TokenApi(IApiFactory apiFactory) {
    return Preconditions.checkNotNull(OAuth2Module.provideUnauthenticatedOAuth2TokenApi(apiFactory), "Cannot return null from a non-@Nullable @Provides method");
  }
}

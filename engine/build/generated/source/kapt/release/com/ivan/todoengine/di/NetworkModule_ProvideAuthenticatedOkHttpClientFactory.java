// Generated by Dagger (https://dagger.dev).
package com.ivan.todoengine.di;

import com.ivan.todoengine.networking.configuration.NetworkConfig;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.Authenticator;
import okhttp3.Dispatcher;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideAuthenticatedOkHttpClientFactory implements Factory<OkHttpClient> {
  private final Provider<NetworkConfig> networkConfigProvider;

  private final Provider<Authenticator> authenticatorProvider;

  private final Provider<Dispatcher> dispatcherProvider;

  private final Provider<Set<Interceptor>> authenticatedInterceptorsProvider;

  private final Provider<Set<Interceptor>> interceptorsProvider;

  public NetworkModule_ProvideAuthenticatedOkHttpClientFactory(
      Provider<NetworkConfig> networkConfigProvider, Provider<Authenticator> authenticatorProvider,
      Provider<Dispatcher> dispatcherProvider,
      Provider<Set<Interceptor>> authenticatedInterceptorsProvider,
      Provider<Set<Interceptor>> interceptorsProvider) {
    this.networkConfigProvider = networkConfigProvider;
    this.authenticatorProvider = authenticatorProvider;
    this.dispatcherProvider = dispatcherProvider;
    this.authenticatedInterceptorsProvider = authenticatedInterceptorsProvider;
    this.interceptorsProvider = interceptorsProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideAuthenticatedOkHttpClient(networkConfigProvider.get(), authenticatorProvider.get(), dispatcherProvider.get(), authenticatedInterceptorsProvider.get(), interceptorsProvider.get());
  }

  public static NetworkModule_ProvideAuthenticatedOkHttpClientFactory create(
      Provider<NetworkConfig> networkConfigProvider, Provider<Authenticator> authenticatorProvider,
      Provider<Dispatcher> dispatcherProvider,
      Provider<Set<Interceptor>> authenticatedInterceptorsProvider,
      Provider<Set<Interceptor>> interceptorsProvider) {
    return new NetworkModule_ProvideAuthenticatedOkHttpClientFactory(networkConfigProvider, authenticatorProvider, dispatcherProvider, authenticatedInterceptorsProvider, interceptorsProvider);
  }

  public static OkHttpClient provideAuthenticatedOkHttpClient(NetworkConfig networkConfig,
      Authenticator authenticator, Dispatcher dispatcher,
      Set<Interceptor> authenticatedInterceptors, Set<Interceptor> interceptors) {
    return Preconditions.checkNotNull(NetworkModule.provideAuthenticatedOkHttpClient(networkConfig, authenticator, dispatcher, authenticatedInterceptors, interceptors), "Cannot return null from a non-@Nullable @Provides method");
  }
}

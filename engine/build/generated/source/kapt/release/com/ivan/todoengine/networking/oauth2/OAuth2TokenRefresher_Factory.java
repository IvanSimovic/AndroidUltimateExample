// Generated by Dagger (https://dagger.dev).
package com.ivan.todoengine.networking.oauth2;

import com.ivan.todoengine.networking.oauth2.request.OAuth2RequestFactory;
import dagger.Lazy;
import dagger.internal.DoubleCheck;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OAuth2TokenRefresher_Factory implements Factory<OAuth2TokenRefresher> {
  private final Provider<OAuth2TokenStorage> tokenStorageProvider;

  private final Provider<OAuth2RequestFactory> oAuth2RequestFactoryProvider;

  private final Provider<OAuth2TokenApi> oAuth2TokenApiProvider;

  public OAuth2TokenRefresher_Factory(Provider<OAuth2TokenStorage> tokenStorageProvider,
      Provider<OAuth2RequestFactory> oAuth2RequestFactoryProvider,
      Provider<OAuth2TokenApi> oAuth2TokenApiProvider) {
    this.tokenStorageProvider = tokenStorageProvider;
    this.oAuth2RequestFactoryProvider = oAuth2RequestFactoryProvider;
    this.oAuth2TokenApiProvider = oAuth2TokenApiProvider;
  }

  @Override
  public OAuth2TokenRefresher get() {
    return newInstance(tokenStorageProvider.get(), oAuth2RequestFactoryProvider.get(), DoubleCheck.lazy(oAuth2TokenApiProvider));
  }

  public static OAuth2TokenRefresher_Factory create(
      Provider<OAuth2TokenStorage> tokenStorageProvider,
      Provider<OAuth2RequestFactory> oAuth2RequestFactoryProvider,
      Provider<OAuth2TokenApi> oAuth2TokenApiProvider) {
    return new OAuth2TokenRefresher_Factory(tokenStorageProvider, oAuth2RequestFactoryProvider, oAuth2TokenApiProvider);
  }

  public static OAuth2TokenRefresher newInstance(OAuth2TokenStorage tokenStorage,
      OAuth2RequestFactory oAuth2RequestFactory, Lazy<OAuth2TokenApi> oAuth2TokenApi) {
    return new OAuth2TokenRefresher(tokenStorage, oAuth2RequestFactory, oAuth2TokenApi);
  }
}

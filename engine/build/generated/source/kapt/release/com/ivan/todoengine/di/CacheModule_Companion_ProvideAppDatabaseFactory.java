// Generated by Dagger (https://dagger.dev).
package com.ivan.todoengine.di;

import android.content.Context;
import com.ivan.todoengine.data.base.AppDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CacheModule_Companion_ProvideAppDatabaseFactory implements Factory<AppDatabase> {
  private final CacheModule.Companion module;

  private final Provider<Context> contextProvider;

  public CacheModule_Companion_ProvideAppDatabaseFactory(CacheModule.Companion module,
      Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public AppDatabase get() {
    return provideAppDatabase(module, contextProvider.get());
  }

  public static CacheModule_Companion_ProvideAppDatabaseFactory create(CacheModule.Companion module,
      Provider<Context> contextProvider) {
    return new CacheModule_Companion_ProvideAppDatabaseFactory(module, contextProvider);
  }

  public static AppDatabase provideAppDatabase(CacheModule.Companion instance, Context context) {
    return Preconditions.checkNotNull(instance.provideAppDatabase(context), "Cannot return null from a non-@Nullable @Provides method");
  }
}

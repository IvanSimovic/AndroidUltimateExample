// Generated by Dagger (https://dagger.dev).
package com.ivan.todoengine.networking.oauth2;

import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class OAuth2Interceptor_Factory implements Factory<OAuth2Interceptor> {
  private final Provider<OAuth2TokenStorage> oAuth2TokenStorageProvider;

  private final Provider<OAuth2TokenRefresher> oAuth2TokenRefresherProvider;

  public OAuth2Interceptor_Factory(Provider<OAuth2TokenStorage> oAuth2TokenStorageProvider,
      Provider<OAuth2TokenRefresher> oAuth2TokenRefresherProvider) {
    this.oAuth2TokenStorageProvider = oAuth2TokenStorageProvider;
    this.oAuth2TokenRefresherProvider = oAuth2TokenRefresherProvider;
  }

  @Override
  public OAuth2Interceptor get() {
    return newInstance(oAuth2TokenStorageProvider.get(), oAuth2TokenRefresherProvider.get());
  }

  public static OAuth2Interceptor_Factory create(
      Provider<OAuth2TokenStorage> oAuth2TokenStorageProvider,
      Provider<OAuth2TokenRefresher> oAuth2TokenRefresherProvider) {
    return new OAuth2Interceptor_Factory(oAuth2TokenStorageProvider, oAuth2TokenRefresherProvider);
  }

  public static OAuth2Interceptor newInstance(OAuth2TokenStorage oAuth2TokenStorage,
      OAuth2TokenRefresher oAuth2TokenRefresher) {
    return new OAuth2Interceptor(oAuth2TokenStorage, oAuth2TokenRefresher);
  }
}

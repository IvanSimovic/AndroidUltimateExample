// Generated by Dagger (https://dagger.dev).
package com.ivan.todoengine.networking.session;

import com.ivan.todoengine.networking.oauth2.OAuth2TokenApi;
import com.ivan.todoengine.networking.oauth2.OAuth2TokenStorage;
import com.ivan.todoengine.networking.oauth2.request.OAuth2RequestFactory;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class SessionRepositoryImpl_Factory implements Factory<SessionRepositoryImpl> {
  private final Provider<OAuth2TokenApi> oAuth2TokenApiProvider;

  private final Provider<OAuth2TokenStorage> oAuth2TokenStorageProvider;

  private final Provider<OAuth2RequestFactory> oAuth2RequestFactoryProvider;

  public SessionRepositoryImpl_Factory(Provider<OAuth2TokenApi> oAuth2TokenApiProvider,
      Provider<OAuth2TokenStorage> oAuth2TokenStorageProvider,
      Provider<OAuth2RequestFactory> oAuth2RequestFactoryProvider) {
    this.oAuth2TokenApiProvider = oAuth2TokenApiProvider;
    this.oAuth2TokenStorageProvider = oAuth2TokenStorageProvider;
    this.oAuth2RequestFactoryProvider = oAuth2RequestFactoryProvider;
  }

  @Override
  public SessionRepositoryImpl get() {
    return newInstance(oAuth2TokenApiProvider.get(), oAuth2TokenStorageProvider.get(), oAuth2RequestFactoryProvider.get());
  }

  public static SessionRepositoryImpl_Factory create(
      Provider<OAuth2TokenApi> oAuth2TokenApiProvider,
      Provider<OAuth2TokenStorage> oAuth2TokenStorageProvider,
      Provider<OAuth2RequestFactory> oAuth2RequestFactoryProvider) {
    return new SessionRepositoryImpl_Factory(oAuth2TokenApiProvider, oAuth2TokenStorageProvider, oAuth2RequestFactoryProvider);
  }

  public static SessionRepositoryImpl newInstance(OAuth2TokenApi oAuth2TokenApi,
      OAuth2TokenStorage oAuth2TokenStorage, OAuth2RequestFactory oAuth2RequestFactory) {
    return new SessionRepositoryImpl(oAuth2TokenApi, oAuth2TokenStorage, oAuth2RequestFactory);
  }
}

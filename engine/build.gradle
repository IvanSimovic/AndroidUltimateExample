apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: "de.mannodermaus.android-junit5"

android {
    signingConfigs {
        release {
            storeFile file('/Users/ivan.simovic/Projects/Android/AndroidUltimateExample/debug.keystore')
            keyAlias = 'androiddebugkey'
            storePassword 'android'
            keyPassword 'android'
        }
    }
    compileSdkVersion 29


    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        // 1) Make sure to use the AndroidJUnitRunner, of a subclass of it. This requires a dependency on androidx.test:runner, too!
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // 2) Connect JUnit 5 to the runner
        testInstrumentationRunnerArgument "runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder"
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            buildConfigField "String", "BASE_URL", '"http://192.168.2.3:5000/api/"'
        }
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            buildConfigField "String", "BASE_URL", '"http://192.168.2.3:5000/api/"'
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion"

    // AndroidX
    kapt "androidx.lifecycle:lifecycle-compiler:$androidLifecycleVersion"
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    implementation "androidx.annotation:annotation:$androidAnnotationVersion"
    implementation "androidx.navigation:navigation-fragment-ktx:$navigationVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$navigationVersion"
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"
    implementation "com.google.android.material:material:$googleMaterialVersion"
    implementation "androidx.lifecycle:lifecycle-extensions:$androidLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$androidLifecycleVersion"

    // Dependency injection
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$daggerVersion"
    kapt "com.google.dagger:dagger-android-support:$daggerVersion"
    implementation "com.google.dagger:dagger:$daggerVersion"
    implementation "com.google.dagger:dagger-android:$daggerVersion"
    implementation "com.google.dagger:dagger-android-support:$daggerVersion"
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.0-alpha01'

    // Local database
    api "androidx.room:room-runtime:$roomVersion"
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-ktx:$roomVersion"

    // Networking
    api "com.squareup.okhttp3:okhttp:$okhttp3Version"
    api "com.squareup.okhttp3:logging-interceptor:$okhttp3Version"
    api "com.squareup.retrofit2:retrofit:$retrofit2Version"
    api "com.squareup.retrofit2:converter-gson:$retrofit2Version"
    api "com.squareup.retrofit2:adapter-rxjava2:$retrofit2Version"

    implementation "com.google.code.gson:gson:$gsonVersion"

    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.1'

    // Testing

    androidTestImplementation "androidx.test:runner:1.2.0"
    androidTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
    androidTestImplementation "de.mannodermaus.junit5:android-test-core:1.0.0"
    androidTestRuntimeOnly "de.mannodermaus.junit5:android-test-runner:1.0.0"

    // (Required) Writing and executing Unit Tests on the JUnit Platform
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.5.2"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.5.2"

    // (Optional) If you need "Parameterized Tests"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.5.2"

    testImplementation "io.mockk:mockk:1.9.3.kotlin12"
    testImplementation "org.assertj:assertj-core:$assertJVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"
    testImplementation "androidx.arch.core:core-testing:$archComponentsVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
}

repositories {
    mavenCentral()
}

kapt {
    arguments {
        arg("room.schemaLocation", "$projectDir/schemas".toString())
    }
}
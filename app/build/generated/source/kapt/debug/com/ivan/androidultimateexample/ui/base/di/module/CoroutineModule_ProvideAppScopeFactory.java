// Generated by Dagger (https://dagger.dev).
package com.ivan.androidultimateexample.ui.base.di.module;

import com.ivan.androidultimateexample.App;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CoroutineModule_ProvideAppScopeFactory implements Factory<CoroutineScope> {
  private final Provider<App> appProvider;

  public CoroutineModule_ProvideAppScopeFactory(Provider<App> appProvider) {
    this.appProvider = appProvider;
  }

  @Override
  public CoroutineScope get() {
    return provideAppScope(appProvider.get());
  }

  public static CoroutineModule_ProvideAppScopeFactory create(Provider<App> appProvider) {
    return new CoroutineModule_ProvideAppScopeFactory(appProvider);
  }

  public static CoroutineScope provideAppScope(App app) {
    return Preconditions.checkNotNull(CoroutineModule.provideAppScope(app), "Cannot return null from a non-@Nullable @Provides method");
  }
}

// Generated by Dagger (https://dagger.dev).
package com.ivan.androidultimateexample.ui.base.di.component;

import android.app.Activity;
import android.app.Application;
import android.content.SharedPreferences;
import androidx.lifecycle.ViewModel;
import com.ivan.androidultimateexample.App;
import com.ivan.androidultimateexample.App_MembersInjector;
import com.ivan.androidultimateexample.ui.base.di.module.ActivityBuilder_ProvideMainActivity;
import com.ivan.androidultimateexample.ui.base.di.module.ActivityBuilder_ProvideSplashActivity;
import com.ivan.androidultimateexample.ui.base.di.module.CoroutineModule_ProvideAppScopeFactory;
import com.ivan.androidultimateexample.ui.base.di.viewmodel.ViewModelFactory;
import com.ivan.androidultimateexample.ui.base.view.BaseBoundActivity_MembersInjector;
import com.ivan.androidultimateexample.ui.base.view.BaseBoundFragment_MembersInjector;
import com.ivan.androidultimateexample.ui.main.activities.ActivitiesFragment;
import com.ivan.androidultimateexample.ui.main.activities.ActivitiesViewModel;
import com.ivan.androidultimateexample.ui.main.activities.ActivitiesViewModel_Factory;
import com.ivan.androidultimateexample.ui.main.activities.ActivityCreateFragment;
import com.ivan.androidultimateexample.ui.main.activities.ActivityCreateViewModel;
import com.ivan.androidultimateexample.ui.main.activities.ActivityCreateViewModel_Factory;
import com.ivan.androidultimateexample.ui.main.activities.ActivityDetailsFragment;
import com.ivan.androidultimateexample.ui.main.activities.ActivityDetailsViewModel;
import com.ivan.androidultimateexample.ui.main.activities.ActivityDetailsViewModel_Factory;
import com.ivan.androidultimateexample.ui.main.activities.ActivityEditFragment;
import com.ivan.androidultimateexample.ui.main.activities.ActivityEditViewModel;
import com.ivan.androidultimateexample.ui.main.activities.ActivityEditViewModel_Factory;
import com.ivan.androidultimateexample.ui.main.activity.MainActivity;
import com.ivan.androidultimateexample.ui.main.activity.MainFragmentBuilder_ProvideActivitiesFragment;
import com.ivan.androidultimateexample.ui.main.activity.MainFragmentBuilder_ProvideActivityCreateFragment;
import com.ivan.androidultimateexample.ui.main.activity.MainFragmentBuilder_ProvideActivityDetailsFragment;
import com.ivan.androidultimateexample.ui.main.activity.MainFragmentBuilder_ProvideActivityEditFragment;
import com.ivan.androidultimateexample.ui.main.activity.MainFragmentBuilder_ProvideLoginFragment;
import com.ivan.androidultimateexample.ui.main.activity.MainFragmentBuilder_ProvideSettingsFragment;
import com.ivan.androidultimateexample.ui.main.activity.MainViewModel;
import com.ivan.androidultimateexample.ui.main.activity.MainViewModel_Factory;
import com.ivan.androidultimateexample.ui.main.login.LoginFragment;
import com.ivan.androidultimateexample.ui.main.login.LoginViewModel;
import com.ivan.androidultimateexample.ui.main.login.LoginViewModel_Factory;
import com.ivan.androidultimateexample.ui.main.settings.SettingsFragment;
import com.ivan.androidultimateexample.ui.main.settings.SettingsViewModel;
import com.ivan.androidultimateexample.ui.main.settings.SettingsViewModel_Factory;
import com.ivan.androidultimateexample.ui.splash.SplashActivity;
import com.ivan.androidultimateexample.ui.splash.SplashViewModel;
import com.ivan.androidultimateexample.ui.splash.SplashViewModel_Factory;
import com.ivan.todoengine.data.api.ActivityApi;
import com.ivan.todoengine.data.base.AppDatabase;
import com.ivan.todoengine.data.local.activity.ActivityDao;
import com.ivan.todoengine.data.repository.activity.ActivityRepository;
import com.ivan.todoengine.data.repository.activity.ActivityRepository_Factory;
import com.ivan.todoengine.data.store.SecureSharedPreferencesStore;
import com.ivan.todoengine.data.store.SecureSharedPreferencesStore_Factory;
import com.ivan.todoengine.di.ApiModule_ProvideActivityApiFactory;
import com.ivan.todoengine.di.CacheModule_ProvideActivitiesDaoFactory;
import com.ivan.todoengine.di.CacheModule_ProvideAppDatabaseFactory;
import com.ivan.todoengine.di.CacheModule_ProvideSharedPreferencesFactory;
import com.ivan.todoengine.di.NetworkModule_ProvideAuthenticatedOkHttpClientFactory;
import com.ivan.todoengine.di.NetworkModule_ProvideAuthenticatedRetrofitApiFactoryFactory;
import com.ivan.todoengine.di.NetworkModule_ProvideAuthenticatorFactory;
import com.ivan.todoengine.di.NetworkModule_ProvideDispatcherFactory;
import com.ivan.todoengine.di.NetworkModule_ProvideLoggingInterceptorFactory;
import com.ivan.todoengine.di.NetworkModule_ProvideUnAuthenticatedOkHttpClientFactory;
import com.ivan.todoengine.di.NetworkModule_ProvideUnauthenticatedRetrofitApiFactoryFactory;
import com.ivan.todoengine.logic.activity.ActivityLogic;
import com.ivan.todoengine.logic.activity.ActivityLogic_Factory;
import com.ivan.todoengine.networking.configuration.DefaultNetworkConfig;
import com.ivan.todoengine.networking.configuration.DefaultNetworkConfig_Factory;
import com.ivan.todoengine.networking.di.IApiFactory;
import com.ivan.todoengine.networking.oauth2.OAuth2Authenticator;
import com.ivan.todoengine.networking.oauth2.OAuth2Authenticator_Factory;
import com.ivan.todoengine.networking.oauth2.OAuth2Interceptor;
import com.ivan.todoengine.networking.oauth2.OAuth2Interceptor_Factory;
import com.ivan.todoengine.networking.oauth2.OAuth2Module_ProvideAuthenticatedOAuth2TokenApiFactory;
import com.ivan.todoengine.networking.oauth2.OAuth2Module_ProvideUnauthenticatedOAuth2TokenApiFactory;
import com.ivan.todoengine.networking.oauth2.OAuth2TokenApi;
import com.ivan.todoengine.networking.oauth2.OAuth2TokenRefresher;
import com.ivan.todoengine.networking.oauth2.OAuth2TokenRefresher_Factory;
import com.ivan.todoengine.networking.oauth2.OAuth2TokenStorage;
import com.ivan.todoengine.networking.oauth2.OAuth2TokenStorage_Factory;
import com.ivan.todoengine.networking.oauth2.request.OAuth2RequestFactory_Factory;
import com.ivan.todoengine.networking.session.SessionRepository;
import com.ivan.todoengine.networking.session.SessionRepositoryImpl;
import com.ivan.todoengine.networking.session.SessionRepositoryImpl_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DelegateFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetFactory;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import kotlinx.coroutines.CoroutineScope;
import okhttp3.Authenticator;
import okhttp3.Dispatcher;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuilder_ProvideSplashActivity.SplashActivitySubcomponent.Factory> splashActivitySubcomponentFactoryProvider;

  private Provider<ActivityBuilder_ProvideMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<App> seedInstanceProvider;

  private Provider<CoroutineScope> provideAppScopeProvider;

  private Provider<Application> provideApplicationProvider;

  private Provider<AppDatabase> provideAppDatabaseProvider;

  private Provider<ActivityDao> provideActivitiesDaoProvider;

  private Provider<DefaultNetworkConfig> defaultNetworkConfigProvider;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<SecureSharedPreferencesStore> secureSharedPreferencesStoreProvider;

  private Provider<OAuth2TokenStorage> oAuth2TokenStorageProvider;

  private Provider<IApiFactory> provideAuthenticatedRetrofitApiFactoryProvider;

  private Provider<OAuth2TokenApi> provideAuthenticatedOAuth2TokenApiProvider;

  private Provider<OAuth2TokenRefresher> oAuth2TokenRefresherProvider;

  private Provider<OAuth2Authenticator> oAuth2AuthenticatorProvider;

  private Provider<Authenticator> provideOAuth2AuthenticatorProvider;

  private Provider<Dispatcher> provideDispatcherProvider;

  private Provider<OAuth2Interceptor> oAuth2InterceptorProvider;

  private Provider<Interceptor> provideOAuth2InterceptorProvider;

  private Provider<Set<Interceptor>> authenticatedSetOfInterceptorProvider;

  private Provider<Interceptor> provideLoggingInterceptorProvider;

  private Provider<Set<Interceptor>> setOfInterceptorProvider;

  private Provider<OkHttpClient> provideAuthenticatedOkHttpClientProvider;

  private Provider<ActivityApi> provideActivityApiProvider;

  private Provider<ActivityRepository> activityRepositoryProvider;

  private Provider<ActivityLogic> activityLogicProvider;

  private Provider<Authenticator> provideAuthenticatorProvider;

  private Provider<OkHttpClient> provideUnAuthenticatedOkHttpClientProvider;

  private Provider<IApiFactory> provideUnauthenticatedRetrofitApiFactoryProvider;

  private Provider<OAuth2TokenApi> provideUnauthenticatedOAuth2TokenApiProvider;

  private Provider<SessionRepositoryImpl> sessionRepositoryImplProvider;

  private Provider<SessionRepository> provideDefaultSessionRepositoryProvider;

  private DaggerAppComponent(App seedInstanceParam) {

    initialize(seedInstanceParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(2).put(SplashActivity.class, (Provider) splashActivitySubcomponentFactoryProvider).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).build();}

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

  @SuppressWarnings("unchecked")
  private void initialize(final App seedInstanceParam) {
    this.splashActivitySubcomponentFactoryProvider = new Provider<ActivityBuilder_ProvideSplashActivity.SplashActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilder_ProvideSplashActivity.SplashActivitySubcomponent.Factory get() {
        return new SplashActivitySubcomponentFactory();}
    };
    this.mainActivitySubcomponentFactoryProvider = new Provider<ActivityBuilder_ProvideMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public ActivityBuilder_ProvideMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();}
    };
    this.seedInstanceProvider = InstanceFactory.create(seedInstanceParam);
    this.provideAppScopeProvider = DoubleCheck.provider(CoroutineModule_ProvideAppScopeFactory.create(seedInstanceProvider));
    this.provideApplicationProvider = DoubleCheck.provider((Provider) seedInstanceProvider);
    this.provideAppDatabaseProvider = DoubleCheck.provider(CacheModule_ProvideAppDatabaseFactory.create((Provider) provideApplicationProvider));
    this.provideActivitiesDaoProvider = DoubleCheck.provider(CacheModule_ProvideActivitiesDaoFactory.create(provideAppDatabaseProvider));
    this.defaultNetworkConfigProvider = DoubleCheck.provider(DefaultNetworkConfig_Factory.create());
    this.provideSharedPreferencesProvider = DoubleCheck.provider(CacheModule_ProvideSharedPreferencesFactory.create((Provider) provideApplicationProvider));
    this.secureSharedPreferencesStoreProvider = DoubleCheck.provider(SecureSharedPreferencesStore_Factory.create(provideSharedPreferencesProvider, (Provider) provideApplicationProvider));
    this.oAuth2TokenStorageProvider = OAuth2TokenStorage_Factory.create((Provider) secureSharedPreferencesStoreProvider);
    this.provideAuthenticatedRetrofitApiFactoryProvider = new DelegateFactory<>();
    this.provideAuthenticatedOAuth2TokenApiProvider = DoubleCheck.provider(OAuth2Module_ProvideAuthenticatedOAuth2TokenApiFactory.create(provideAuthenticatedRetrofitApiFactoryProvider));
    this.oAuth2TokenRefresherProvider = OAuth2TokenRefresher_Factory.create(oAuth2TokenStorageProvider, OAuth2RequestFactory_Factory.create(), provideAuthenticatedOAuth2TokenApiProvider);
    this.oAuth2AuthenticatorProvider = OAuth2Authenticator_Factory.create(oAuth2TokenStorageProvider, oAuth2TokenRefresherProvider);
    this.provideOAuth2AuthenticatorProvider = DoubleCheck.provider((Provider) oAuth2AuthenticatorProvider);
    this.provideDispatcherProvider = DoubleCheck.provider(NetworkModule_ProvideDispatcherFactory.create());
    this.oAuth2InterceptorProvider = OAuth2Interceptor_Factory.create(oAuth2TokenStorageProvider, oAuth2TokenRefresherProvider);
    this.provideOAuth2InterceptorProvider = DoubleCheck.provider((Provider) oAuth2InterceptorProvider);
    this.authenticatedSetOfInterceptorProvider = SetFactory.<Interceptor>builder(1, 0).addProvider(provideOAuth2InterceptorProvider).build();
    this.provideLoggingInterceptorProvider = DoubleCheck.provider(NetworkModule_ProvideLoggingInterceptorFactory.create());
    this.setOfInterceptorProvider = SetFactory.<Interceptor>builder(1, 0).addProvider(provideLoggingInterceptorProvider).build();
    this.provideAuthenticatedOkHttpClientProvider = DoubleCheck.provider(NetworkModule_ProvideAuthenticatedOkHttpClientFactory.create((Provider) defaultNetworkConfigProvider, provideOAuth2AuthenticatorProvider, provideDispatcherProvider, authenticatedSetOfInterceptorProvider, setOfInterceptorProvider));
    DelegateFactory.setDelegate(provideAuthenticatedRetrofitApiFactoryProvider, DoubleCheck.provider(NetworkModule_ProvideAuthenticatedRetrofitApiFactoryFactory.create(provideAuthenticatedOkHttpClientProvider, (Provider) defaultNetworkConfigProvider)));
    this.provideActivityApiProvider = DoubleCheck.provider(ApiModule_ProvideActivityApiFactory.create(provideAuthenticatedRetrofitApiFactoryProvider));
    this.activityRepositoryProvider = DoubleCheck.provider(ActivityRepository_Factory.create(provideActivitiesDaoProvider, provideActivityApiProvider));
    this.activityLogicProvider = DoubleCheck.provider(ActivityLogic_Factory.create(activityRepositoryProvider));
    this.provideAuthenticatorProvider = DoubleCheck.provider(NetworkModule_ProvideAuthenticatorFactory.create());
    this.provideUnAuthenticatedOkHttpClientProvider = DoubleCheck.provider(NetworkModule_ProvideUnAuthenticatedOkHttpClientFactory.create((Provider) defaultNetworkConfigProvider, provideAuthenticatorProvider, provideDispatcherProvider, SetFactory.<Interceptor>empty(), setOfInterceptorProvider));
    this.provideUnauthenticatedRetrofitApiFactoryProvider = DoubleCheck.provider(NetworkModule_ProvideUnauthenticatedRetrofitApiFactoryFactory.create(provideUnAuthenticatedOkHttpClientProvider, (Provider) defaultNetworkConfigProvider));
    this.provideUnauthenticatedOAuth2TokenApiProvider = DoubleCheck.provider(OAuth2Module_ProvideUnauthenticatedOAuth2TokenApiFactory.create(provideUnauthenticatedRetrofitApiFactoryProvider));
    this.sessionRepositoryImplProvider = SessionRepositoryImpl_Factory.create(provideUnauthenticatedOAuth2TokenApiProvider, oAuth2TokenStorageProvider, OAuth2RequestFactory_Factory.create());
    this.provideDefaultSessionRepositoryProvider = DoubleCheck.provider((Provider) sessionRepositoryImplProvider);
  }

  @Override
  public void inject(App arg0) {
    injectApp(arg0);}

  private App injectApp(App instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    App_MembersInjector.injectActivityDispatchingAndroidInjector(instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder extends AppComponent.Builder {
    private App seedInstance;

    @Override
    public void seedInstance(App arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(seedInstance, App.class);
      return new DaggerAppComponent(seedInstance);
    }
  }

  private final class SplashActivitySubcomponentFactory implements ActivityBuilder_ProvideSplashActivity.SplashActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_ProvideSplashActivity.SplashActivitySubcomponent create(
        SplashActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new SplashActivitySubcomponentImpl(arg0);
    }
  }

  private final class SplashActivitySubcomponentImpl implements ActivityBuilder_ProvideSplashActivity.SplashActivitySubcomponent {
    private Provider<SplashViewModel> splashViewModelProvider;

    private SplashActivitySubcomponentImpl(SplashActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(SplashViewModel.class, (Provider) splashViewModelProvider);}

    private ViewModelFactory getViewModelFactory() {
      return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

    @SuppressWarnings("unchecked")
    private void initialize(final SplashActivity arg0) {
      this.splashViewModelProvider = SplashViewModel_Factory.create(DaggerAppComponent.this.provideAppScopeProvider);
    }

    @Override
    public void inject(SplashActivity arg0) {
      injectSplashActivity(arg0);}

    private SplashActivity injectSplashActivity(SplashActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.getDispatchingAndroidInjectorOfObject());
      BaseBoundActivity_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
      return instance;
    }
  }

  private final class MainActivitySubcomponentFactory implements ActivityBuilder_ProvideMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public ActivityBuilder_ProvideMainActivity.MainActivitySubcomponent create(MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements ActivityBuilder_ProvideMainActivity.MainActivitySubcomponent {
    private Provider<MainFragmentBuilder_ProvideActivitiesFragment.ActivitiesFragmentSubcomponent.Factory> activitiesFragmentSubcomponentFactoryProvider;

    private Provider<MainFragmentBuilder_ProvideActivityDetailsFragment.ActivityDetailsFragmentSubcomponent.Factory> activityDetailsFragmentSubcomponentFactoryProvider;

    private Provider<MainFragmentBuilder_ProvideActivityEditFragment.ActivityEditFragmentSubcomponent.Factory> activityEditFragmentSubcomponentFactoryProvider;

    private Provider<MainFragmentBuilder_ProvideActivityCreateFragment.ActivityCreateFragmentSubcomponent.Factory> activityCreateFragmentSubcomponentFactoryProvider;

    private Provider<MainFragmentBuilder_ProvideSettingsFragment.SettingsFragmentSubcomponent.Factory> settingsFragmentSubcomponentFactoryProvider;

    private Provider<MainFragmentBuilder_ProvideLoginFragment.LoginFragmentSubcomponent.Factory> loginFragmentSubcomponentFactoryProvider;

    private Provider<MainViewModel> mainViewModelProvider;

    private MainActivitySubcomponentImpl(MainActivity arg0) {

      initialize(arg0);
    }

    private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
        ) {
      return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(8).put(SplashActivity.class, (Provider) DaggerAppComponent.this.splashActivitySubcomponentFactoryProvider).put(MainActivity.class, (Provider) DaggerAppComponent.this.mainActivitySubcomponentFactoryProvider).put(ActivitiesFragment.class, (Provider) activitiesFragmentSubcomponentFactoryProvider).put(ActivityDetailsFragment.class, (Provider) activityDetailsFragmentSubcomponentFactoryProvider).put(ActivityEditFragment.class, (Provider) activityEditFragmentSubcomponentFactoryProvider).put(ActivityCreateFragment.class, (Provider) activityCreateFragmentSubcomponentFactoryProvider).put(SettingsFragment.class, (Provider) settingsFragmentSubcomponentFactoryProvider).put(LoginFragment.class, (Provider) loginFragmentSubcomponentFactoryProvider).build();}

    private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
      return DispatchingAndroidInjector_Factory.newInstance(getMapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());}

    private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
        ) {
      return Collections.<Class<? extends ViewModel>, Provider<ViewModel>>singletonMap(MainViewModel.class, (Provider) mainViewModelProvider);}

    private ViewModelFactory getViewModelFactory() {
      return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivity arg0) {
      this.activitiesFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuilder_ProvideActivitiesFragment.ActivitiesFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuilder_ProvideActivitiesFragment.ActivitiesFragmentSubcomponent.Factory get(
            ) {
          return new ActivitiesFragmentSubcomponentFactory();}
      };
      this.activityDetailsFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuilder_ProvideActivityDetailsFragment.ActivityDetailsFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuilder_ProvideActivityDetailsFragment.ActivityDetailsFragmentSubcomponent.Factory get(
            ) {
          return new ActivityDetailsFragmentSubcomponentFactory();}
      };
      this.activityEditFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuilder_ProvideActivityEditFragment.ActivityEditFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuilder_ProvideActivityEditFragment.ActivityEditFragmentSubcomponent.Factory get(
            ) {
          return new ActivityEditFragmentSubcomponentFactory();}
      };
      this.activityCreateFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuilder_ProvideActivityCreateFragment.ActivityCreateFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuilder_ProvideActivityCreateFragment.ActivityCreateFragmentSubcomponent.Factory get(
            ) {
          return new ActivityCreateFragmentSubcomponentFactory();}
      };
      this.settingsFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuilder_ProvideSettingsFragment.SettingsFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuilder_ProvideSettingsFragment.SettingsFragmentSubcomponent.Factory get(
            ) {
          return new SettingsFragmentSubcomponentFactory();}
      };
      this.loginFragmentSubcomponentFactoryProvider = new Provider<MainFragmentBuilder_ProvideLoginFragment.LoginFragmentSubcomponent.Factory>() {
        @Override
        public MainFragmentBuilder_ProvideLoginFragment.LoginFragmentSubcomponent.Factory get() {
          return new LoginFragmentSubcomponentFactory();}
      };
      this.mainViewModelProvider = MainViewModel_Factory.create(DaggerAppComponent.this.provideAppScopeProvider);
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);}

    private MainActivity injectMainActivity(MainActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
      BaseBoundActivity_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
      return instance;
    }

    private final class ActivitiesFragmentSubcomponentFactory implements MainFragmentBuilder_ProvideActivitiesFragment.ActivitiesFragmentSubcomponent.Factory {
      @Override
      public MainFragmentBuilder_ProvideActivitiesFragment.ActivitiesFragmentSubcomponent create(
          ActivitiesFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ActivitiesFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ActivitiesFragmentSubcomponentImpl implements MainFragmentBuilder_ProvideActivitiesFragment.ActivitiesFragmentSubcomponent {
      private Provider<ActivitiesViewModel> activitiesViewModelProvider;

      private ActivitiesFragmentSubcomponentImpl(ActivitiesFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2).put(MainViewModel.class, (Provider) MainActivitySubcomponentImpl.this.mainViewModelProvider).put(ActivitiesViewModel.class, (Provider) activitiesViewModelProvider).build();}

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final ActivitiesFragment arg0) {
        this.activitiesViewModelProvider = ActivitiesViewModel_Factory.create(DaggerAppComponent.this.activityLogicProvider, DaggerAppComponent.this.provideAppScopeProvider);
      }

      @Override
      public void inject(ActivitiesFragment arg0) {
        injectActivitiesFragment(arg0);}

      private ActivitiesFragment injectActivitiesFragment(ActivitiesFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        BaseBoundFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class ActivityDetailsFragmentSubcomponentFactory implements MainFragmentBuilder_ProvideActivityDetailsFragment.ActivityDetailsFragmentSubcomponent.Factory {
      @Override
      public MainFragmentBuilder_ProvideActivityDetailsFragment.ActivityDetailsFragmentSubcomponent create(
          ActivityDetailsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ActivityDetailsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ActivityDetailsFragmentSubcomponentImpl implements MainFragmentBuilder_ProvideActivityDetailsFragment.ActivityDetailsFragmentSubcomponent {
      private Provider<ActivityDetailsViewModel> activityDetailsViewModelProvider;

      private ActivityDetailsFragmentSubcomponentImpl(ActivityDetailsFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2).put(MainViewModel.class, (Provider) MainActivitySubcomponentImpl.this.mainViewModelProvider).put(ActivityDetailsViewModel.class, (Provider) activityDetailsViewModelProvider).build();}

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final ActivityDetailsFragment arg0) {
        this.activityDetailsViewModelProvider = ActivityDetailsViewModel_Factory.create(DaggerAppComponent.this.activityLogicProvider, DaggerAppComponent.this.provideAppScopeProvider);
      }

      @Override
      public void inject(ActivityDetailsFragment arg0) {
        injectActivityDetailsFragment(arg0);}

      private ActivityDetailsFragment injectActivityDetailsFragment(
          ActivityDetailsFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        BaseBoundFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class ActivityEditFragmentSubcomponentFactory implements MainFragmentBuilder_ProvideActivityEditFragment.ActivityEditFragmentSubcomponent.Factory {
      @Override
      public MainFragmentBuilder_ProvideActivityEditFragment.ActivityEditFragmentSubcomponent create(
          ActivityEditFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ActivityEditFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ActivityEditFragmentSubcomponentImpl implements MainFragmentBuilder_ProvideActivityEditFragment.ActivityEditFragmentSubcomponent {
      private Provider<ActivityEditViewModel> activityEditViewModelProvider;

      private ActivityEditFragmentSubcomponentImpl(ActivityEditFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2).put(MainViewModel.class, (Provider) MainActivitySubcomponentImpl.this.mainViewModelProvider).put(ActivityEditViewModel.class, (Provider) activityEditViewModelProvider).build();}

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final ActivityEditFragment arg0) {
        this.activityEditViewModelProvider = ActivityEditViewModel_Factory.create(DaggerAppComponent.this.activityLogicProvider, DaggerAppComponent.this.provideAppScopeProvider);
      }

      @Override
      public void inject(ActivityEditFragment arg0) {
        injectActivityEditFragment(arg0);}

      private ActivityEditFragment injectActivityEditFragment(ActivityEditFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        BaseBoundFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class ActivityCreateFragmentSubcomponentFactory implements MainFragmentBuilder_ProvideActivityCreateFragment.ActivityCreateFragmentSubcomponent.Factory {
      @Override
      public MainFragmentBuilder_ProvideActivityCreateFragment.ActivityCreateFragmentSubcomponent create(
          ActivityCreateFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new ActivityCreateFragmentSubcomponentImpl(arg0);
      }
    }

    private final class ActivityCreateFragmentSubcomponentImpl implements MainFragmentBuilder_ProvideActivityCreateFragment.ActivityCreateFragmentSubcomponent {
      private Provider<ActivityCreateViewModel> activityCreateViewModelProvider;

      private ActivityCreateFragmentSubcomponentImpl(ActivityCreateFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2).put(MainViewModel.class, (Provider) MainActivitySubcomponentImpl.this.mainViewModelProvider).put(ActivityCreateViewModel.class, (Provider) activityCreateViewModelProvider).build();}

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final ActivityCreateFragment arg0) {
        this.activityCreateViewModelProvider = ActivityCreateViewModel_Factory.create(DaggerAppComponent.this.activityLogicProvider, DaggerAppComponent.this.provideAppScopeProvider);
      }

      @Override
      public void inject(ActivityCreateFragment arg0) {
        injectActivityCreateFragment(arg0);}

      private ActivityCreateFragment injectActivityCreateFragment(ActivityCreateFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        BaseBoundFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class SettingsFragmentSubcomponentFactory implements MainFragmentBuilder_ProvideSettingsFragment.SettingsFragmentSubcomponent.Factory {
      @Override
      public MainFragmentBuilder_ProvideSettingsFragment.SettingsFragmentSubcomponent create(
          SettingsFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new SettingsFragmentSubcomponentImpl(arg0);
      }
    }

    private final class SettingsFragmentSubcomponentImpl implements MainFragmentBuilder_ProvideSettingsFragment.SettingsFragmentSubcomponent {
      private Provider<SettingsViewModel> settingsViewModelProvider;

      private SettingsFragmentSubcomponentImpl(SettingsFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2).put(MainViewModel.class, (Provider) MainActivitySubcomponentImpl.this.mainViewModelProvider).put(SettingsViewModel.class, (Provider) settingsViewModelProvider).build();}

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final SettingsFragment arg0) {
        this.settingsViewModelProvider = SettingsViewModel_Factory.create(DaggerAppComponent.this.provideAppScopeProvider);
      }

      @Override
      public void inject(SettingsFragment arg0) {
        injectSettingsFragment(arg0);}

      private SettingsFragment injectSettingsFragment(SettingsFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        BaseBoundFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class LoginFragmentSubcomponentFactory implements MainFragmentBuilder_ProvideLoginFragment.LoginFragmentSubcomponent.Factory {
      @Override
      public MainFragmentBuilder_ProvideLoginFragment.LoginFragmentSubcomponent create(
          LoginFragment arg0) {
        Preconditions.checkNotNull(arg0);
        return new LoginFragmentSubcomponentImpl(arg0);
      }
    }

    private final class LoginFragmentSubcomponentImpl implements MainFragmentBuilder_ProvideLoginFragment.LoginFragmentSubcomponent {
      private Provider<LoginViewModel> loginViewModelProvider;

      private LoginFragmentSubcomponentImpl(LoginFragment arg0) {

        initialize(arg0);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>> getMapOfClassOfAndProviderOfViewModel(
          ) {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2).put(MainViewModel.class, (Provider) MainActivitySubcomponentImpl.this.mainViewModelProvider).put(LoginViewModel.class, (Provider) loginViewModelProvider).build();}

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());}

      @SuppressWarnings("unchecked")
      private void initialize(final LoginFragment arg0) {
        this.loginViewModelProvider = LoginViewModel_Factory.create(DaggerAppComponent.this.provideDefaultSessionRepositoryProvider, DaggerAppComponent.this.provideAppScopeProvider);
      }

      @Override
      public void inject(LoginFragment arg0) {
        injectLoginFragment(arg0);}

      private LoginFragment injectLoginFragment(LoginFragment instance) {
        DaggerFragment_MembersInjector.injectAndroidInjector(instance, MainActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfObject());
        BaseBoundFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }
  }
}
